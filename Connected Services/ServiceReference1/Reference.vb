'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace ServiceReference1
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="ServiceReference1.IService1")>  _
    Public Interface IService1
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/add", ReplyAction:="http://tempuri.org/IService1/addResponse")>  _
        Function add(ByVal num1 As Double, ByVal num2 As Double) As Double
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/add", ReplyAction:="http://tempuri.org/IService1/addResponse")>  _
        Function addAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/Sub", ReplyAction:="http://tempuri.org/IService1/SubResponse")>  _
        Function [Sub](ByVal num1 As Double, ByVal num2 As Double) As Double
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/Sub", ReplyAction:="http://tempuri.org/IService1/SubResponse")>  _
        Function SubAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/aMultipli", ReplyAction:="http://tempuri.org/IService1/aMultipliResponse")>  _
        Function aMultipli(ByVal num1 As Double, ByVal num2 As Double) As Double
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/aMultipli", ReplyAction:="http://tempuri.org/IService1/aMultipliResponse")>  _
        Function aMultipliAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/Divide", ReplyAction:="http://tempuri.org/IService1/DivideResponse")>  _
        Function Divide(ByVal num1 As Double, ByVal num2 As Double) As Double
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/Divide", ReplyAction:="http://tempuri.org/IService1/DivideResponse")>  _
        Function DivideAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IService1Channel
        Inherits ServiceReference1.IService1, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class Service1Client
        Inherits System.ServiceModel.ClientBase(Of ServiceReference1.IService1)
        Implements ServiceReference1.IService1
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Function add(ByVal num1 As Double, ByVal num2 As Double) As Double Implements ServiceReference1.IService1.add
            Return MyBase.Channel.add(num1, num2)
        End Function
        
        Public Function addAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double) Implements ServiceReference1.IService1.addAsync
            Return MyBase.Channel.addAsync(num1, num2)
        End Function
        
        Public Function [Sub](ByVal num1 As Double, ByVal num2 As Double) As Double Implements ServiceReference1.IService1.[Sub]
            Return MyBase.Channel.Sub(num1, num2)
        End Function
        
        Public Function SubAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double) Implements ServiceReference1.IService1.SubAsync
            Return MyBase.Channel.SubAsync(num1, num2)
        End Function
        
        Public Function aMultipli(ByVal num1 As Double, ByVal num2 As Double) As Double Implements ServiceReference1.IService1.aMultipli
            Return MyBase.Channel.aMultipli(num1, num2)
        End Function
        
        Public Function aMultipliAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double) Implements ServiceReference1.IService1.aMultipliAsync
            Return MyBase.Channel.aMultipliAsync(num1, num2)
        End Function
        
        Public Function Divide(ByVal num1 As Double, ByVal num2 As Double) As Double Implements ServiceReference1.IService1.Divide
            Return MyBase.Channel.Divide(num1, num2)
        End Function
        
        Public Function DivideAsync(ByVal num1 As Double, ByVal num2 As Double) As System.Threading.Tasks.Task(Of Double) Implements ServiceReference1.IService1.DivideAsync
            Return MyBase.Channel.DivideAsync(num1, num2)
        End Function
    End Class
End Namespace
